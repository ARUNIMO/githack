import * as React from 'react';
import { Font, FontSizeUpgrade, FontWeight, Color } from '../../interfaces';
interface TextProps {
    /**
     * Color of the text.
     * @defaultValue `grey-8`
     */
    color?: Color;
    /**
     * The font family from theme.
     * @defaultValue `primary`
     */
    font?: Font;
    /**
     * Size of the font.
     * @defaultValue `18`
     */
    size?: FontSizeUpgrade;
    /**
     * Should the text be uppercased.
     * @defaultValue `false`
     */
    uppercase?: boolean;
    /**
     * A shorthand for the `font-weight` property.
     * @defaultValue 'regular' (translates to 400)
     */
    weight?: FontWeight;
    /** A shorthand for the `text-shadow` property. */
    shadow?: React.CSSProperties['textShadow'];
    /** Sets the letter-spacing property. */
    letterSpacing?: React.CSSProperties['letterSpacing'];
    /** The line. */
    lineHeight?: React.CSSProperties['lineHeight'];
    /**
     * Sets margin on the element.
     * @defaultValue `0`
     */
    margin?: React.CSSProperties['margin'];
    /** Render the element as. styled-components' polymorphic prop. */
    as?: React.ElementType;
    children?: React.ReactNode;
}
interface HeadingProps extends TextProps {
    size: 60 | 48 | 36 | 30 | 24 | 20;
}
interface BodyProps extends TextProps {
    size: 20 | 18 | 16 | 14;
}
interface UiProps extends TextProps {
    size: 48 | 36 | 24 | 20 | 18 | 17 | 16 | 14;
}
interface LabelProps extends TextProps {
    size: 14 | 12;
}
interface CodeProps extends TextProps {
    size: 20 | 16;
}
/**
 * A base component for all the text variants.
 * It will render a `p` tag by default.
 *
 * {@link https://www.figma.com/file/G3rNzV4jvuzjpqUn1pMlxd/Source-DS?node-id=1756%3A25 Figma}
 */
declare const Text: import("styled-components").StyledComponent<"p", any, TextProps, never>;
declare const Body: ({ children, size, ...props }: BodyProps) => JSX.Element;
declare const Heading: ({ children, size, ...props }: HeadingProps) => JSX.Element;
declare const Ui: ({ children, size, ...props }: UiProps) => JSX.Element;
declare const Label: ({ children, size, ...props }: LabelProps) => JSX.Element;
declare const Code: ({ children, size, ...props }: CodeProps) => JSX.Element;
export { Text, Body, Heading, Ui, Label, Code };
export type { TextProps };
