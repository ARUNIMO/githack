{"version":3,"file":"index-5a6066a7.js","sources":["../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js","../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.js","../../node_modules/framer-motion/dist/es/utils/use-force-update.js"],"sourcesContent":["import { useMemo, useEffect, createElement } from 'react';\nimport { useConstant } from '../../utils/use-constant.js';\nimport { PresenceContext } from './PresenceContext.js';\n\nvar presenceId = 0;\nfunction getPresenceId() {\n    var id = presenceId;\n    presenceId++;\n    return id;\n}\nvar PresenceChild = function (_a) {\n    var children = _a.children, initial = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;\n    var presenceChildren = useConstant(newChildrenMap);\n    var id = useConstant(getPresenceId);\n    var context = useMemo(function () { return ({\n        id: id,\n        initial: initial,\n        isPresent: isPresent,\n        custom: custom,\n        onExitComplete: function (childId) {\n            presenceChildren.set(childId, true);\n            var allComplete = true;\n            presenceChildren.forEach(function (isComplete) {\n                if (!isComplete)\n                    allComplete = false;\n            });\n            allComplete && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n        },\n        register: function (childId) {\n            presenceChildren.set(childId, false);\n            return function () { return presenceChildren.delete(childId); };\n        },\n    }); }, \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(function () {\n        presenceChildren.forEach(function (_, key) { return presenceChildren.set(key, false); });\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    useEffect(function () {\n        !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n    }, [isPresent]);\n    return (createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { __spread } from 'tslib';\nimport { useContext, useRef, createElement, Fragment, cloneElement, Children, isValidElement } from 'react';\nimport { SharedLayoutContext, isSharedLayout } from '../AnimateSharedLayout/SharedLayoutContext.js';\nimport { useForceUpdate } from '../../utils/use-force-update.js';\nimport { PresenceChild } from './PresenceChild.js';\n\nfunction getChildKey(child) {\n    return child.key || \"\";\n}\nfunction updateChildLookup(children, allChildren) {\n    var seenChildren = process.env.NODE_ENV !== \"production\" ? new Set() : null;\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        if (process.env.NODE_ENV !== \"production\" && seenChildren) {\n            if (seenChildren.has(key)) {\n                console.warn(\"Children of AnimatePresence require unique keys. \\\"\" + key + \"\\\" is a duplicate.\");\n            }\n            seenChildren.add(key);\n        }\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * @library\n *\n * Any `Frame` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { Frame, AnimatePresence } from 'framer'\n *\n * // As items are added and removed from `items`\n * export function Items({ items }) {\n *   return (\n *     <AnimatePresence>\n *       {items.map(item => (\n *         <Frame\n *           key={item.id}\n *           initial={{ opacity: 0 }}\n *           animate={{ opacity: 1 }}\n *           exit={{ opacity: 0 }}\n *         />\n *       ))}\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * @motion\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var forceRender = useForceUpdate();\n    var layoutContext = useContext(SharedLayoutContext);\n    if (isSharedLayout(layoutContext)) {\n        forceRender = layoutContext.forceUpdate;\n    }\n    var isInitialRender = useRef(true);\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(filteredChildren);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map())\n        .current;\n    // A living record of all currently exiting components.\n    var exiting = useRef(new Set()).current;\n    updateChildLookup(filteredChildren, allChildren);\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    if (isInitialRender.current) {\n        isInitialRender.current = false;\n        return (createElement(Fragment, null, filteredChildren.map(function (child) { return (createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    var childrenToRender = __spread(filteredChildren);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n        else {\n            // In case this key has re-entered, remove from the exiting list\n            exiting.delete(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    presentChildren.current = childrenToRender;\n    if (process.env.NODE_ENV !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (createElement(Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n","import { __read } from 'tslib';\nimport { useCallback, useRef, useState } from 'react';\nimport { useUnmountEffect } from './use-unmount-effect.js';\n\nfunction useForceUpdate() {\n    var unloadingRef = useRef(false);\n    var _a = __read(useState(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];\n    useUnmountEffect(function () { return (unloadingRef.current = true); });\n    return useCallback(function () {\n        !unloadingRef.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n}\n\nexport { useForceUpdate };\n"],"names":["presenceId","getPresenceId","id","PresenceChild","_a","children","initial","isPresent","onExitComplete","custom","presenceAffectsLayout","presenceChildren","useConstant","newChildrenMap","context","useMemo","childId","set","allComplete","forEach","isComplete","register","delete","undefined","_","key","useEffect","size","createElement","PresenceContext","Provider","value","Map","getChildKey","child","AnimatePresence","_b","exitBeforeEnter","_c","forceRender","unloadingRef","useRef","__read","useState","forcedRenderCount","setForcedRenderCount","useUnmountEffect","current","useCallback","useForceUpdate","layoutContext","useContext","SharedLayoutContext","isSharedLayout","forceUpdate","isInitialRender","filteredChildren","filtered","Children","isValidElement","push","onlyElements","presentChildren","allChildren","exiting","Set","seenChildren","process","env","NODE_ENV","has","console","warn","add","updateChildLookup","Fragment","map","childrenToRender","__spread","presentKeys","targetKeys","numPresent","length","i","indexOf","get","insertionIndex","splice","removeIndex","findIndex","presentChild","cloneElement"],"mappings":"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"}